version: 2.1

commands:
  dependencies:
    steps:
      - run:
          name: Installing necessary packages
          command: |
            sudo apt update
            sudo apt install -y tar gzip curl software-properties-common

      # - run:
      #     name: Installing aws-cli
      #     command: |
      #       curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      #       unzip awscliv2.zip
      #       sudo ./aws/install
      - run:
          name: Installing ansible
          command: |
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible

  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: "string"
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>

  revert_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/Dtvdyf99ArqNWh3EFf1rNi/migration_<< parameters.workflow_id >>)

            if(( $SUCCESS==1 )); 
            then
             cd ~/project/backend
             npm install
             npm run migration:revert
            fi

jobs:
  build_frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build_backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test_frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm install
            npm run test

  test_backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Test build-backend
          command: |
            cd backend
            npm install
            npm run test

  scan_frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      # - restore_cache:
      #     keys: [frontend-scan]
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force

  analyze_backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run: npm audit --audit-level=critical --prefix backend

  analyze_frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run: npm audit --audit-level=critical --prefix backend

  scan_backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      # - restore_cache:
      #     keys: [backend-scan]
      - run:
          name: scan backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  deploy_infrastructure:
    docker:
      - image: cimg/aws:2023.01
    steps:
      - checkout
      - dependencies

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM" \
              --region us-east-1 \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM" \
              --region us-east-1 \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["e8:8c:9d:22:3d:ac:9d:a4:a0:81:e7:cd:14:f8:06:48"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies  
          command: |
            apk add curl
            apk add --upgrade bash
            apk add --update ansible
            apk add openssh-client
            pip3 install awscli
      - run:
          name: Configure server
          command: |
            cat ~/project/.circleci/ansible/inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure

  run_migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations >> migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                  curl https://kvdb.io/Dtvdyf99ArqNWh3EFf1rNi/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi

  deploy_frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)  
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - destroy_environment
      - revert_migrations

  deploy_backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["e8:8c:9d:22:3d:ac:9d:a4:a0:81:e7:cd:14:f8:06:48"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl openssh-client
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy_environment
      - revert_migrations

  smoke_test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl openssh-client
            pip install awscli
      - run:
          name: Backend smoke test
          command: |
            export BACKEND_IP_ADD=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP_ADD}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test
          command: |
            if curl -s  "http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com" | grep "Welcome"
            then
               return 0
            else
               return 1
            fi

      - destroy_environment
      - revert_migrations
  
  cloudfront_update:
    docker:
      - image: cimg/aws:2023.01
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Save Old Worldflow Id to file
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
            curl --insecure https://kvdb.io/Dtvdyf99ArqNWh3EFf1rNi/old_workflow_id -d "${OLD_WORKFLOW_ID}"

      - run:
          name: Update cloudfromt distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --region us-east-1 \
            --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople

            echo Old WorkFlow Id: "${OLD_WORKFLOW_ID}"
            echo Current Workflow Id: "${CIRCLE_WORKFLOW_ID:0:7}"

      - destroy_environment
      - revert_migrations

  cleanup:
    docker:
      - image: cimg/aws:2023.01
    steps:
      - checkout
      - attach_workspace:
            at: ~/
      - run:
          name: Remove old stacks and files
          command: |
            export STACKS=($(aws cloudformation list-stacks \
              --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
            export OldWorkflowID=$(curl --insecure https://kvdb.io/Dtvdyf99ArqNWh3EFf1rNi/old_workflow_id)

            echo Old Workflow ID: $OldWorkflowID 
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi

      - destroy_environment
      - revert_migrations

workflows:
  default:
    jobs:
      - build_backend
      - build_frontend
      # - test_backend:
      #     requires:
      #       - build_backend
      # - test_frontend:
      #     requires:
      #       - build_frontend
      # - scan_backend:
      #     requires:
      #       - build_backend
      # - scan_frontend:
      #     requires:
      #       - build_frontend
      - deploy_infrastructure
          # requires:
          #   - test_frontend
          #   - test_backend
          #   - scan_backend
          #   - scan_frontend

      - configure_infrastructure:
          requires:
            - deploy_infrastructure
      - run_migrations:
          requires:
            - configure_infrastructure
      - deploy_frontend:
          requires:
            - run_migrations
      - deploy_backend:
          requires:
            - run_migrations
      - smoke_test:
          requires:
            - deploy_frontend
            - deploy_backend
      - cloudfront_update:
          requires:
            - smoke_test
      - cleanup:
          requires:
            - cloudfront_update

# some trigger