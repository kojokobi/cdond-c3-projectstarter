#   smoke_test_frontend:
#     docker:
#       - image: python:3.7-alpine3.11
#     steps:
#       - checkout
#       - attach_workspace:
#           at: ~/
#       - run:
#           name: Install dependencies
#           command: |
#               apk add --update tar gzip ansible nodejs npm curl openssh-client
#               pip install awscli
              
#       - run:
#             name: Frontend smoke test.
#             command: |
#               if curl -s  "http://udapeople-${CIRCLE_WORKFLOW_ID:0:17}.s3-website-us-east-1.amazonaws.com" | grep "Welcome"
#               then
#                 return 0
#               else
#                 return 1
#               fi
#      smoke_test_backend:
#     docker:
#       - image: python:3.7-alpine3.11
#     steps:
#       - checkout
#       - attach_workspace:
#           at: ~/
#       - run:
#           name: Install dependencies
#           command: |
#             apk add --update tar gzip ansible nodejs npm curl openssh-client
#             pip install awscli
#       - run:
#           name: Get backend url
#           command: |
#              export API_URL="http://${BACKEND_IP}:3030"
#              echo "${API_URL}"
#              if curl "${API_URL}/api/status" | grep "ok"
#              then
#                 eturn 0
#               else
#                 return 1
#               fi


#  export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)  
#  export API_URL="http://${BACKEND_IP}:3030"
#  echo "API_URL = ${API_URL}"
#  echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
#  cat frontend/.env



#   # Fetch the Old workflow ID
#             export OldWorkflowID=($(aws cloudformation \
#             list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
#             --no-paginate --output text))
#             echo OldWorkflowID: "${OldWorkflowID}"
#             echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
#             # Fetch the stack names          
#             export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
#             --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
#             echo Stack names: "${STACKS[@]}"    


#   aws cloudformation deploy \
#             --template-file ./.circleci/files/cloudfront.yml \
#             --stack-name InitialStack\
#             --parameter-overrides WorkflowID=udapeople-78910

    # - run:
    #     name: Remove old stacks and files
    #     command: |
    #       if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
    #       then
    #         aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
    #         aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
    #         aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
    #       fi


    # aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> .circleci/ansible/inventory.txt

    #         aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> .circleci/ansible/inventory.txt
    #         cat .circleci/ansible/inventory.txt



            # export BACKEND_IP_ADD=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            # export API_URL="http://${BACKEND_IP_ADD}:3030"
            # echo "${API_URL}"

            # export BACKEND_IP_WITH_UBUNTU_USER=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            # "ubuntu@${BACKEND_IP_WITH_UBUNTU_USER}" >> .circleci/ansible/inventory.txt
            
